// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TestAppIOSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Combine
import CoreGraphics
import CoreMedia
import CoreServices
import CoreTelephony
import FileProvider
import Foundation
import Photos
import PhotosUI
import ReplayKit
import Security
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import VideoToolbox
import _Concurrency
import _StringProcessing
public struct Event : Swift.Codable {
  public init(type: TestAppIOSDK.Event.`Type` = .event, name: Swift.String, parameters: [Swift.String : Swift.String] = [:])
  public enum `Type` : Swift.String, Swift.Codable {
    case event
    case error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TestAppConfiguration {
  public init(appId: Swift.String, apiToken: Swift.String)
}
@objc @_hasMissingDesignatedInitializers public class TestAppio : ObjectiveC.NSObject {
  @objc deinit
}
extension TestAppIOSDK.TestAppio {
  public static func show()
  public static func hide()
  public static func setup(scene: UIKit.UIWindowScene, configuration: TestAppIOSDK.TestAppConfiguration)
  public static func identify(userId: Swift.String, name: Swift.String, email: Swift.String, traits: [Swift.String : Swift.String] = [:], completion: @escaping (Swift.Error?) -> ())
  public static func clearCredentials()
  public static func log(event: TestAppIOSDK.Event)
}
extension UIKit.UIControl.State : Swift.Hashable {
}
extension TestAppIOSDK.Event.`Type` : Swift.Equatable {}
extension TestAppIOSDK.Event.`Type` : Swift.Hashable {}
extension TestAppIOSDK.Event.`Type` : Swift.RawRepresentable {}
